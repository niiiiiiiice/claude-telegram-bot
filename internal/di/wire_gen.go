// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"go.uber.org/zap"
	"telegram-chatbot/internal/application/handlers"
	"telegram-chatbot/internal/config"
	"telegram-chatbot/internal/domain/services"
	"telegram-chatbot/internal/infrastructure/repositories"
	services2 "telegram-chatbot/internal/infrastructure/services"
	"telegram-chatbot/internal/infrastructure/telegram"
)

// Injectors from wire.go:

func InitializeContainer(configConfig *config.Config) (*Container, func(), error) {
	sessionRepository := repositories.NewMemorySessionRepository()
	claudeService := NewClaudeAPIService(configConfig)
	logger, err := NewLogger(configConfig)
	if err != nil {
		return nil, nil, err
	}
	commandHandler := handlers.NewCommandHandler(sessionRepository, claudeService, logger)
	bot, err := telegram.NewBot(configConfig, commandHandler, logger)
	if err != nil {
		return nil, nil, err
	}
	container := &Container{
		Bot: bot,
	}
	return container, func() {
	}, nil
}

// wire.go:

type Container struct {
	Bot *telegram.Bot
}

func NewLogger(cfg *config.Config) (*zap.Logger, error) {
	config2 := zap.NewProductionConfig()

	switch cfg.LogLevel {
	case "debug":
		config2.
			Level = zap.NewAtomicLevelAt(zap.DebugLevel)
	case "info":
		config2.
			Level = zap.NewAtomicLevelAt(zap.InfoLevel)
	case "warn":
		config2.
			Level = zap.NewAtomicLevelAt(zap.WarnLevel)
	case "error":
		config2.
			Level = zap.NewAtomicLevelAt(zap.ErrorLevel)
	}

	return config2.Build()
}

func NewClaudeAPIService(cfg *config.Config) services.ClaudeService {
	return services2.NewClaudeAPIService(cfg.ClaudeAPIKey)
}
