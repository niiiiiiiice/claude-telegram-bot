// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"go.uber.org/zap"
	"telegram-chatbot/internal/application/handlers"
	"telegram-chatbot/internal/config"
	"telegram-chatbot/internal/domain/repositories"
	"telegram-chatbot/internal/domain/services"
	infraHealth "telegram-chatbot/internal/infrastructure/healthcheck"
	repositories2 "telegram-chatbot/internal/infrastructure/repositories"
	services2 "telegram-chatbot/internal/infrastructure/services"
	"telegram-chatbot/internal/infrastructure/telegram"
	"telegram-chatbot/internal/presentation/controllers"
)

// Injectors from wire.go:

func InitializeContainer(configConfig *config.Config) (*Container, func(), error) {
	sessionRepository := NewRedisSessionRepository(configConfig)
	claudeService := NewClaudeAPIService(configConfig)
	logger, err := NewLogger(configConfig)
	if err != nil {
		return nil, nil, err
	}
	commandHandler := handlers.NewCommandHandler(sessionRepository, claudeService, logger)
	bot, err := telegram.NewBot(configConfig, commandHandler, logger)
	if err != nil {
		return nil, nil, err
	}
	service := NewHealthCheckService(configConfig, logger)
	container := &Container{
		Bot:         bot,
		HealthCheck: service,
	}
	return container, func() {
	}, nil
}

// wire.go:

type Container struct {
	Bot         *telegram.Bot
	HealthCheck *infraHealth.Service
}

func NewRedisSessionRepository(cfg *config.Config) repositories.SessionRepository {
	return repositories2.NewRedisSessionRepository(cfg)
}

func NewLogger(cfg *config.Config) (*zap.Logger, error) {
	config2 := zap.NewProductionConfig()

	switch cfg.LogLevel {
	case "debug":
		config2.
			Level = zap.NewAtomicLevelAt(zap.DebugLevel)
	case "info":
		config2.
			Level = zap.NewAtomicLevelAt(zap.InfoLevel)
	case "warn":
		config2.
			Level = zap.NewAtomicLevelAt(zap.WarnLevel)
	case "error":
		config2.
			Level = zap.NewAtomicLevelAt(zap.ErrorLevel)
	}

	return config2.Build()
}

func NewClaudeAPIService(cfg *config.Config) services.ClaudeService {
	return services2.NewClaudeAPIService(cfg.ClaudeAPIKey)
}

func NewHealthCheckService(cfg *config.Config, logger *zap.Logger) *infraHealth.Service {
	srv := infraHealth.NewHealthCheckService(logger, cfg.HealthCheckPort)
	healthCtrl := controllers.NewHealthCheckController(srv.ReadyFlag())
	docsCtrl := controllers.NewDocumentationController()
	healthCtrl.RegisterRoutes(srv.Router().Group("/health"))
	docsCtrl.RegisterRoutes(srv.Router().Group("/swagger"))
	return srv
}
