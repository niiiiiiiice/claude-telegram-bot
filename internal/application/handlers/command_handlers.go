package handlers

import (
	"context"
	"fmt"
	"telegram-chatbot/internal/domain/commands"
	"telegram-chatbot/internal/domain/repositories"
	"telegram-chatbot/internal/domain/services"

	"go.uber.org/zap"
)

const MaxContextSize = 10000 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤

type CommandHandler struct {
	sessionRepo   repositories.SessionRepository
	claudeService services.ClaudeService
	logger        *zap.Logger
}

func NewCommandHandler(
	sessionRepo repositories.SessionRepository,
	claudeService services.ClaudeService,
	logger *zap.Logger,
) *CommandHandler {
	return &CommandHandler{
		sessionRepo:   sessionRepo,
		claudeService: claudeService,
		logger:        logger,
	}
}

func (h *CommandHandler) HandleStart(ctx context.Context, cmd commands.StartCommand) (string, error) {
	h.logger.Info("Handling start command", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))

	// –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
	if err := h.sessionRepo.DeleteSession(cmd.ChatID, cmd.UserID); err != nil {
		h.logger.Error("Failed to delete session", zap.Error(err))
		return "", err
	}

	return h.getHelpMessage(), nil
}

func (h *CommandHandler) HandleHelp(ctx context.Context, cmd commands.HelpCommand) (string, error) {
	h.logger.Info("Handling help command", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))
	return h.getHelpMessage(), nil
}

func (h *CommandHandler) getHelpMessage() string {
	return `ü§ñ **–°–µ–º–µ–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/begin_chat - –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–±—â–µ–Ω–∏—è (–±–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç)
/end_chat - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/whoami - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ

üí¨ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö —É–ø–æ–º–∏–Ω–∞–π –º–µ–Ω—è @botname —á—Ç–æ–±—ã —è –æ—Ç–≤–µ—Ç–∏–ª
‚Ä¢ –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ - –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å—ë
‚Ä¢ –°–µ—Å—Å–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, —è –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â—É

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ

–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /begin_chat —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä! üöÄ`
}

func (h *CommandHandler) HandleBeginChat(ctx context.Context, cmd commands.StartBeginCommand) (string, error) {
	h.logger.Info("Handling start chat command", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))

	session, err := h.sessionRepo.GetSession(cmd.ChatID, cmd.UserID)
	if err != nil {
		return "", err
	}

	if session.IsActive {
		// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
		session.Reset()
	}

	session.IsActive = true

	if err := h.sessionRepo.SaveSession(session); err != nil {
		return "", err
	}

	return "üí¨ –°–µ—Å—Å–∏—è –æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞—Ç–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.", nil
}

func (h *CommandHandler) HandleEndChat(ctx context.Context, cmd commands.EndChatCommand) (string, error) {
	h.logger.Info("Handling end chat command", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))

	session, err := h.sessionRepo.GetSession(cmd.ChatID, cmd.UserID)
	if err != nil {
		return "", err
	}

	if !session.IsActive {
		return "‚ÑπÔ∏è –°–µ—Å—Å–∏—è –æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", nil
	}

	session.IsActive = false
	session.Reset()

	if err := h.sessionRepo.SaveSession(session); err != nil {
		return "", err
	}

	return "üëã –°–µ—Å—Å–∏—è –æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", nil
}

func (h *CommandHandler) HandleWhoAmI(ctx context.Context, cmd commands.WhoAmICommand) (string, error) {
	h.logger.Info("Handling whoami command", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))

	isActive := h.sessionRepo.IsSessionActive(cmd.ChatID, cmd.UserID)
	status := "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
	if isActive {
		status = "–∞–∫—Ç–∏–≤–Ω–∞"
	}

	name := cmd.FirstName
	if cmd.LastName != "" {
		name += " " + cmd.LastName
	}

	return fmt.Sprintf(
		"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"+
			"–ò–º—è: %s\n"+
			"Username: @%s\n"+
			"User ID: %d\n"+
			"Chat ID: %d\n"+
			"–°–µ—Å—Å–∏—è: %s",
		name, cmd.Username, cmd.UserID, cmd.ChatID, status,
	), nil
}

func (h *CommandHandler) HandleMessage(ctx context.Context, cmd commands.ProcessMessageCommand) (string, error) {
	h.logger.Info("Handling message", zap.Int64("chatID", cmd.ChatID), zap.Int64("userID", cmd.UserID))

	session, err := h.sessionRepo.GetSession(cmd.ChatID, cmd.UserID)
	if err != nil {
		return "", err
	}

	if !session.IsActive {
		return "‚ÑπÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /startChat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", nil
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session.AddMessage("user", cmd.Message)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if session.GetContextSize() > MaxContextSize {
		session.Reset()
		if err := h.sessionRepo.SaveSession(session); err != nil {
			return "", err
		}
		return "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∏ –±—ã–ª –æ—á–∏—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.", nil
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	response, err := h.claudeService.GenerateResponse(session.Messages)
	if err != nil {
		h.logger.Error("Failed to generate response", zap.Error(err))
		return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", nil
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
	session.AddMessage("assistant", response)

	if err := h.sessionRepo.SaveSession(session); err != nil {
		return "", err
	}

	return response, nil
}
